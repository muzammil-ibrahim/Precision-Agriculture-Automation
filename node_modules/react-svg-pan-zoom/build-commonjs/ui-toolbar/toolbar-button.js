"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("../constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class ToolbarButton extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      hover: false
    };
  }
  change(event) {
    event.preventDefault();
    event.stopPropagation();
    switch (event.type) {
      case 'mouseenter':
      case 'touchstart':
        this.setState({
          hover: true
        });
        break;
      case 'mouseleave':
      case 'touchend':
      case 'touchcancel':
        this.setState({
          hover: false
        });
        break;
      default:
      //noop
    }
  }
  render() {
    let style = {
      display: "block",
      width: "24px",
      height: "24px",
      margin: [_constants.POSITION_TOP, _constants.POSITION_BOTTOM].indexOf(this.props.toolbarPosition) >= 0 ? "2px 1px" : "1px 2px",
      color: this.props.active || this.state.hover ? this.props.activeColor : '#FFF',
      transition: "color 200ms ease",
      background: "none",
      padding: "0px",
      border: "0px",
      outline: "0px",
      cursor: "pointer"
    };
    return /*#__PURE__*/_react.default.createElement("button", {
      onMouseEnter: e => this.change(e),
      onMouseLeave: e => this.change(e),
      onTouchStart: e => {
        this.change(e);
        this.props.onClick(e);
      },
      onTouchEnd: e => this.change(e),
      onTouchCancel: e => this.change(e),
      onClick: this.props.onClick,
      style: style,
      title: this.props.title,
      name: this.props.name,
      type: "button"
    }, this.props.children);
  }
}
exports.default = ToolbarButton;
ToolbarButton.propTypes = {
  title: _propTypes.default.string.isRequired,
  name: _propTypes.default.string.isRequired,
  toolbarPosition: _propTypes.default.string.isRequired,
  activeColor: _propTypes.default.string.isRequired,
  onClick: _propTypes.default.func.isRequired,
  active: _propTypes.default.bool.isRequired
};