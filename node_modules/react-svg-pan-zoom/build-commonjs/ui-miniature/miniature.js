"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Miniature;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("../constants");
var _transformationMatrix = require("transformation-matrix");
var _miniatureToggleButton = _interopRequireDefault(require("./miniature-toggle-button"));
var _miniatureMask = _interopRequireDefault(require("./miniature-mask"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const DEFAULT_BACKGROUND = "#616264";
function Miniature(_ref) {
  let {
    value,
    onChangeValue,
    children,
    SVGBackground,
    background = DEFAULT_BACKGROUND,
    position = _constants.POSITION_LEFT,
    width: miniatureWidth = 100,
    height: miniatureHeight = 80
  } = _ref;
  let {
    SVGMinX,
    SVGMinY,
    SVGWidth,
    SVGHeight,
    viewerWidth,
    viewerHeight
  } = value;
  let ratio = SVGHeight / SVGWidth;
  let zoomToFit = ratio >= 1 ? miniatureHeight / SVGHeight : miniatureWidth / SVGWidth;
  let [{
    x: x1,
    y: y1
  }, {
    x: x2,
    y: y2
  }] = (0, _transformationMatrix.applyToPoints)((0, _transformationMatrix.inverse)(value), [{
    x: 0,
    y: 0
  }, {
    x: viewerWidth,
    y: viewerHeight
  }]);
  let width, height;
  if (value.miniatureOpen) {
    width = miniatureWidth;
    height = miniatureHeight;
  } else {
    width = 24;
    height = 24;
  }
  let style = {
    position: "absolute",
    overflow: "hidden",
    outline: "1px solid rgba(19, 20, 22, 0.90)",
    transition: "width 200ms ease, height 200ms ease, bottom 200ms ease",
    width: width + "px",
    height: height + "px",
    bottom: "6px",
    [position === _constants.POSITION_LEFT ? 'left' : 'right']: "6px",
    background
  };
  let centerTranslation = ratio >= 1 ? `translate(${(miniatureWidth - SVGWidth * zoomToFit) / 2 - SVGMinX * zoomToFit}, ${-SVGMinY * zoomToFit})` : `translate(${-SVGMinX * zoomToFit}, ${(miniatureHeight - SVGHeight * zoomToFit) / 2 - SVGMinY * zoomToFit})`;
  return /*#__PURE__*/_react.default.createElement("div", {
    role: "navigation",
    style: style
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: miniatureWidth,
    height: miniatureHeight,
    style: {
      pointerEvents: "none"
    }
  }, /*#__PURE__*/_react.default.createElement("g", {
    transform: centerTranslation
  }, /*#__PURE__*/_react.default.createElement("g", {
    transform: `scale(${zoomToFit}, ${zoomToFit})`
  }, /*#__PURE__*/_react.default.createElement("rect", {
    fill: SVGBackground,
    x: SVGMinX,
    y: SVGMinY,
    width: SVGWidth,
    height: SVGHeight
  }), children, /*#__PURE__*/_react.default.createElement(_miniatureMask.default, {
    SVGWidth: SVGWidth,
    SVGHeight: SVGHeight,
    SVGMinX: SVGMinX,
    SVGMinY: SVGMinY,
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2,
    zoomToFit: zoomToFit
  })))), /*#__PURE__*/_react.default.createElement(_miniatureToggleButton.default, {
    value: value,
    onChangeValue: onChangeValue,
    position: position
  }));
}
Miniature.propTypes = {
  value: _propTypes.default.object.isRequired,
  onChangeValue: _propTypes.default.func.isRequired,
  SVGBackground: _propTypes.default.string.isRequired,
  //customizations
  position: _propTypes.default.oneOf([_constants.POSITION_RIGHT, _constants.POSITION_LEFT]),
  background: _propTypes.default.string,
  width: _propTypes.default.number,
  height: _propTypes.default.number
};