const _excluded = ["width", "height", "onChangeTool", "onChangeValue"];
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
import React from "react";
import ReactSVGPanZoom from './viewer';
import PropTypes from "prop-types";
import { TOOL_NONE } from "./constants";
export default class UncontrolledReactSVGPanZoom extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: props.defaultValue || {},
      tool: props.defaultTool || TOOL_NONE
    };
    this.Viewer = null;
    this.changeTool = this.changeTool.bind(this);
    this.changeValue = this.changeValue.bind(this);
  }
  changeTool(tool) {
    this.setState({
      tool
    });
  }
  changeValue(value) {
    this.setState({
      value
    });
  }
  pan(SVGDeltaX, SVGDeltaY) {
    this.Viewer.pan(SVGDeltaX, SVGDeltaY);
  }
  zoom(SVGPointX, SVGPointY, scaleFactor) {
    this.Viewer.zoom(SVGPointX, SVGPointY, scaleFactor);
  }
  fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {
    this.Viewer.fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);
  }
  fitToViewer(SVGAlignX, SVGAlignY) {
    this.Viewer.fitToViewer(SVGAlignX, SVGAlignY);
  }
  zoomOnViewerCenter(scaleFactor) {
    this.Viewer.zoomOnViewerCenter(scaleFactor);
  }
  setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {
    this.Viewer.setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel);
  }
  reset() {
    this.Viewer.reset();
  }
  openMiniature() {
    this.Viewer.openMiniature();
  }
  closeMiniature() {
    this.Viewer.closeMiniature();
  }
  render() {
    const _this$props = this.props,
      {
        width,
        height,
        onChangeTool,
        onChangeValue
      } = _this$props,
      props = _objectWithoutProperties(_this$props, _excluded);
    const {
      tool,
      value
    } = this.state;
    return /*#__PURE__*/React.createElement(ReactSVGPanZoom, _extends({
      width: width,
      height: height,
      tool: tool,
      onChangeTool: this.changeTool,
      value: value,
      onChangeValue: this.changeValue,
      ref: Viewer => this.Viewer = Viewer
    }, props));
  }
}
UncontrolledReactSVGPanZoom.propTypes = {
  width: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  defaultValue: PropTypes.object,
  defaultTool: PropTypes.string
};